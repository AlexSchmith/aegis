#!/bin/env python3

import pwn
import logging
import argparse
import rage.rage

from rage.log import aegis_log
from rage.rage import rAEG


class Aegis:
    """Class that does the control flow for analysis and execution."""

    def __init__(self, binary, libc):
        """Initialize important variables for the binary."""
        self.binary = binary
        self.elf = pwn.ELF(binary)
        if libc is not None:
            self.libc = pwn.ELF(libc)
        else:
            self.libc = self.elf.libc

        self.has_leak = False
        self.has_overflow = False
        self.has_libc_leak = False
        self.has_canary = False
        self.has

    def static_analysis(self):
        """Set variables from the output of the static analysis."""
        return None

    def symbolic_analysis(self):
        """Set variables from the output of the symbolic analysis."""
        symbol = rAEG(self.binary)
        symbol.stack_smash()

        return None

    def determine_exploit(self):
        """Choose which exploit to do for the binary."""
        return None


def print_title():
     print("""
   |\                     /)
 /\_\\__               (_//
|   `>\-`     _._       //`)
 \ /` \\  _.-`:::`-._  //
  `    \|`    :::    `|/
        |     :::     |
        |.....:::.....|
        |:::::::::::::|
        |     :::     |
        \     :::     /
         \    :::    /
          `-. ::: .-'
           //`:::`\\
          //   '   \\
         |/         \\

   ▄████████    ▄████████    ▄██████▄   ▄█     ▄████████
  ███    ███   ███    ███   ███    ███ ███    ███    ███
  ███    ███   ███    █▀    ███    █▀  ███▌   ███    █▀
  ███    ███  ▄███▄▄▄      ▄███        ███▌   ███
▀███████████ ▀▀███▀▀▀     ▀▀███ ████▄  ███▌ ▀███████████
  ███    ███   ███    █▄    ███    ███ ███           ███
  ███    ███   ███    ███   ███    ███ ███     ▄█    ███
  ███    █▀    ██████████   ████████▀  █▀    ▄████████▀

    """)


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        prog = "Aegis",
        description = "An automatic exploit generator framework using binaryninja, angr, ROPgadget, and pwntools"
    )


    parser.add_argument("-bin", metavar="binary", type=str, help="The binary that is to be exploited", default=None)
    parser.add_argument("-lib", metavar="libc", type=str, help="The libc shared library object linked to the binary", default=None)
    parser.add_argument("-ip", metavar="ip", type=str, help="The ip address of the remote challenge", default=None)
    parser.add_argument("-port", metavar="port", type=str, help="The port of the remote challenge", default=None)
    parser.add_argument("-login", metavar="login", type=str, help="Your login to your ctfd account", default=None)
    parser.add_argument("-pw", metavar="password", type=str, help="Your password to your ctfd account", default=None)
    parser.add_argument("-ctfd", metavar="website", type=str, help="The ctfd webpage", default=None)

    arguments = parser.parse_args()
    print_title()
    print(arguments.binary)
    print(arguments.ip)
