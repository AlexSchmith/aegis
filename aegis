#!/bin/env python3

import pwn
import logging
import argparse

# from rage.log import aegis_log
from rage.rage import rAEG
from rage.machine import Machine
from rage.against import Against


class Aegis:
    """Class that does the control flow for analysis and execution."""

    def __init__(self, binary, libc, ip, port):
        """Initialize important variables for the binary."""
        self.binary = binary
        self.elf = pwn.ELF(binary)
        if libc is not None:
            self.libc = pwn.ELF(libc)
        else:
            self.libc = self.elf.libc

        self.ip = ip
        self.port = port

        self.has_leak = False
        self.has_overflow = False
        self.has_libc_leak = False

        self.symbol = rAEG(self.binary)
        self.machine = Machine(self.binary)

        self.symbolic_padding = None

    def static_analysis(self):
        """Set variables from the output of the static analysis."""
        self.machine.check_mitigations()
        self.machine.check_vulnerable_copy()
        self.machine.check_vulnerable_input()
        printf_addresses = self.machine.check_vulnerable_printf()
        self.machine.find_win_gadget()
        self.machine.find_string_address()

    def symbolic_analysis(self):
        """Set variables from the output of the symbolic analysis."""
        self.symbol.stack_smash()
        self.symbolic_padding = self.symbol.symbolic_padding
        return None

    def determine_exploit(self):
        """Choose which exploit to do for the binary."""
        return None

    def exploit(self):
        """Create and run exploit using Against module."""
        self.against = Against(self.binary, self.libc, self.machine)

        self.against.rop_ret2puts()

        return None


def print_title():
     print("""
   |\\\\                     /)
 /\_\\\\__               (_//
|   `>\-`     _._       //`)
 \ /` \\\\  _.-`:::`-._  //
  `    \|`    :::    `|/
        |     :::     |
        |.....:::.....|
        |:::::::::::::|
        |     :::     |
        \     :::     /
         \    :::    /
          `-. ::: .-'
           //`:::`\\\\
          //   '   \\\\
         |/         \\\\

   ▄████████    ▄████████    ▄██████▄   ▄█     ▄████████
  ███    ███   ███    ███   ███    ███ ███    ███    ███
  ███    ███   ███    █▀    ███    █▀  ███▌   ███    █▀
  ███    ███  ▄███▄▄▄      ▄███        ███▌   ███
▀███████████ ▀▀███▀▀▀     ▀▀███ ████▄  ███▌ ▀███████████
  ███    ███   ███    █▄    ███    ███ ███           ███
  ███    ███   ███    ███   ███    ███ ███     ▄█    ███
  ███    █▀    ██████████   ████████▀  █▀    ▄████████▀

    """)


if __name__ == "__main__":


    logging.getLogger("angr").setLevel(logging.CRITICAL)
    logging.getLogger("os").setLevel(logging.CRITICAL)
    logging.getLogger("pwnlib").setLevel(logging.CRITICAL)
    logging.getLogger("aegis_log").setLevel(logging.INFO)

    parser = argparse.ArgumentParser(
        prog = "Aegis",
        description = "An automatic exploit generator framework using binaryninja, angr, ROPgadget, and pwntools"
    )


    parser.add_argument("-bin", metavar="binary", type=str, help="The binary that is to be exploited", default=None)
    parser.add_argument("-libc", metavar="libc", type=str, help="The libc shared library object linked to the binary", default=None)
    parser.add_argument("-ip", metavar="ip", type=str, help="The ip address of the remote challenge", default=None)
    parser.add_argument("-port", metavar="port", type=str, help="The port of the remote challenge", default=None)
    parser.add_argument("-login", metavar="login", type=str, help="Your login to your ctfd account", default=None)
    parser.add_argument("-pw", metavar="password", type=str, help="Your password to your ctfd account", default=None)
    parser.add_argument("-ctfd", metavar="website", type=str, help="The ctfd webpage", default=None)

    arguments = parser.parse_args()
    print_title()

    aeg = Aegis(arguments.bin, arguments.libc, arguments.ip, arguments.port)
    aeg.static_analysis()
    aeg.symbolic_analysis()
